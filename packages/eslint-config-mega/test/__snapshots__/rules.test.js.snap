// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rules lints 1`] = `
Object {
  "errorCount": 6,
  "fixableErrorCount": 1,
  "fixableWarningCount": 0,
  "results": Array [
    Object {
      "errorCount": 0,
      "filePath": "@typescript-eslint.ts",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [],
      "warningCount": 0,
    },
    Object {
      "errorCount": 0,
      "filePath": "babel.js",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [],
      "warningCount": 0,
    },
    Object {
      "errorCount": 0,
      "filePath": "flowtype.js",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [],
      "warningCount": 0,
    },
    Object {
      "errorCount": 1,
      "filePath": "react.js",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 23,
          "endColumn": 30,
          "endLine": 1,
          "line": 1,
          "message": "Unable to resolve path to module 'react'.",
          "nodeType": "Literal",
          "ruleId": "import/no-unresolved",
          "severity": 2,
        },
      ],
      "source": "const React = require('react');

// Prettier wants several attributes on the same line, but \\"plugin:react/all\\"
// only allows one per line.
module.exports = <div one two />;
",
      "warningCount": 0,
    },
    Object {
      "errorCount": 3,
      "filePath": "standard.js",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 1,
          "endColumn": 3,
          "endLine": 5,
          "line": 3,
          "message": "Expected an assignment or function call and instead saw an expression.",
          "nodeType": "ExpressionStatement",
          "ruleId": "no-unused-expressions",
          "severity": 2,
        },
        Object {
          "column": 1,
          "endColumn": 74,
          "endLine": 3,
          "line": 3,
          "message": "'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong' is not defined.",
          "messageId": "undef",
          "nodeType": "Identifier",
          "ruleId": "no-undef",
          "severity": 2,
        },
        Object {
          "column": 3,
          "endColumn": 8,
          "endLine": 4,
          "line": 4,
          "message": "'index' is not defined.",
          "messageId": "undef",
          "nodeType": "Identifier",
          "ruleId": "no-undef",
          "severity": 2,
        },
      ],
      "source": "// Prettier wants to break on new lines inside the square brackets, but
// \`standard/computed-property-even-spacing\` wants all on one line.
loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong[
  index
];
",
      "warningCount": 0,
    },
    Object {
      "errorCount": 2,
      "filePath": "unicorn.js",
      "fixableErrorCount": 1,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 1,
          "endColumn": 10,
          "endLine": 3,
          "fix": Object {
            "range": Array [
              109,
              109,
            ],
            "text": "
",
          },
          "line": 3,
          "message": "Expected newline before \\"16777215\\" directive.",
          "messageId": "expected",
          "nodeType": "ExpressionStatement",
          "ruleId": "lines-around-directive",
          "severity": 2,
        },
        Object {
          "column": 1,
          "endColumn": 10,
          "endLine": 3,
          "line": 3,
          "message": "Expected an assignment or function call and instead saw an expression.",
          "nodeType": "ExpressionStatement",
          "ruleId": "no-unused-expressions",
          "severity": 2,
        },
      ],
      "source": "// Prettier wants number literals to be lowercase, but
// \`plugin:unicorn/recommended\` wants them uppercase.
0xffffff;
",
      "warningCount": 0,
    },
  ],
  "usedDeprecatedRules": Array [
    Object {
      "replacedBy": Array [
        "triple-slash-reference",
      ],
      "ruleId": "@typescript-eslint/no-triple-slash-reference",
    },
    Object {
      "replacedBy": Array [
        "consistent-type-definitions",
      ],
      "ruleId": "@typescript-eslint/prefer-interface",
    },
    Object {
      "replacedBy": Array [],
      "ruleId": "flowtype/valid-syntax",
    },
    Object {
      "replacedBy": Array [],
      "ruleId": "jsx-a11y/label-has-for",
    },
    Object {
      "replacedBy": Array [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
  ],
  "warningCount": 0,
}
`;

exports[`rules should report errors 1`] = `
Object {
  "errorCount": 36,
  "fixableErrorCount": 26,
  "fixableWarningCount": 0,
  "results": Array [
    Object {
      "errorCount": 6,
      "filePath": "React.jsx",
      "fixableErrorCount": 4,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 18,
          "endColumn": 20,
          "endLine": 11,
          "fix": Object {
            "range": Array [
              313,
              315,
            ],
            "text": " => ",
          },
          "line": 11,
          "message": "Replace \`=>\` with \`·=>·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 10,
          "endColumn": 25,
          "endLine": 12,
          "fix": Object {
            "range": Array [
              326,
              341,
            ],
            "text": "(
    <p>
      dsa<br></br>
    ",
          },
          "line": 12,
          "message": "Replace \`<p>dsa<br></br>\` with \`(⏎····<p>⏎······dsa<br></br>⏎····\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 10,
          "endColumn": 13,
          "endLine": 12,
          "line": 12,
          "message": "'React' must be in scope when using JSX",
          "nodeType": "JSXOpeningElement",
          "ruleId": "react/react-in-jsx-scope",
          "severity": 2,
        },
        Object {
          "column": 16,
          "endColumn": 20,
          "endLine": 12,
          "line": 12,
          "message": "'React' must be in scope when using JSX",
          "nodeType": "JSXOpeningElement",
          "ruleId": "react/react-in-jsx-scope",
          "severity": 2,
        },
        Object {
          "column": 16,
          "endColumn": 20,
          "endLine": 12,
          "fix": Object {
            "range": Array [
              335,
              341,
            ],
            "text": " />",
          },
          "line": 12,
          "message": "Empty components are self-closing",
          "nodeType": "JSXOpeningElement",
          "ruleId": "react/self-closing-comp",
          "severity": 2,
        },
        Object {
          "column": 1,
          "endColumn": 2,
          "endLine": 13,
          "fix": Object {
            "range": Array [
              346,
              347,
            ],
            "text": "  );
};",
          },
          "line": 13,
          "message": "Replace \`}\` with \`··);⏎};\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
      ],
      "source": "/*
 * Created Date: Sunday, July 14th 2019, 5:15:23 pm
 * Author: hanjingbo@ysstech.com | jingboup@gmail.com
 * -----
 * Last Modified: Sunday, July 14th 2019, 8:19:52 pm
 * Modified By: hanjingbo <hanjingbo@ysstech.com | jingboup@gmail.com>
 * -----
 * Copyright (c) 2019-present, #Lugia#.
 */

export default ()=>{
  return <p>dsa<br></br></p>
}
",
      "warningCount": 0,
    },
    Object {
      "errorCount": 7,
      "filePath": "React.tsx",
      "fixableErrorCount": 5,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 1,
          "endColumn": 2,
          "endLine": 13,
          "line": 11,
          "message": "Missing return type on function.",
          "messageId": "missingReturnType",
          "nodeType": "FunctionDeclaration",
          "ruleId": "@typescript-eslint/explicit-function-return-type",
          "severity": 1,
        },
        Object {
          "column": 13,
          "endColumn": 41,
          "endLine": 11,
          "fix": Object {
            "range": Array [
              308,
              336,
            ],
            "text": " children }: { children: string }) ",
          },
          "line": 11,
          "message": "Replace \`children}:{children:string})\` with \`·children·}:·{·children:·string·})·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 10,
          "endColumn": 13,
          "endLine": 12,
          "line": 12,
          "message": "'React' must be in scope when using JSX",
          "nodeType": "JSXOpeningElement",
          "ruleId": "react/react-in-jsx-scope",
          "severity": 2,
        },
        Object {
          "column": 27,
          "endColumn": 27,
          "endLine": 12,
          "fix": Object {
            "range": Array [
              364,
              364,
            ],
            "text": ";",
          },
          "line": 12,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 16,
          "endColumn": 2,
          "endLine": 17,
          "line": 15,
          "message": "Missing return type on function.",
          "messageId": "missingReturnType",
          "nodeType": "ArrowFunctionExpression",
          "ruleId": "@typescript-eslint/explicit-function-return-type",
          "severity": 1,
        },
        Object {
          "column": 18,
          "endColumn": 18,
          "endLine": 15,
          "fix": Object {
            "range": Array [
              385,
              385,
            ],
            "text": " ",
          },
          "line": 15,
          "message": "Insert \`·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 10,
          "endColumn": 14,
          "endLine": 16,
          "line": 16,
          "message": "'React' must be in scope when using JSX",
          "nodeType": "JSXOpeningElement",
          "ruleId": "react/react-in-jsx-scope",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 12,
          "endLine": 16,
          "fix": Object {
            "range": Array [
              401,
              401,
            ],
            "text": " ",
          },
          "line": 16,
          "message": "Insert \`·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 2,
          "endColumn": 2,
          "endLine": 17,
          "fix": Object {
            "range": Array [
              406,
              406,
            ],
            "text": ";",
          },
          "line": 17,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
      ],
      "source": "/*
 * Created Date: Sunday, July 14th 2019, 9:09:22 pm
 * Author: hanjingbo@ysstech.com | jingboup@gmail.com
 * -----
 * Last Modified: Sunday, July 14th 2019, 9:34:27 pm
 * Modified By: hanjingbo <hanjingbo@ysstech.com | jingboup@gmail.com>
 * -----
 * Copyright (c) 2019-present, #Lugia#.
 */

function P({children}:{children:string}){
  return <p>{children}</p>
}

export default ()=> {
  return <P/>;
}
",
      "warningCount": 2,
    },
    Object {
      "errorCount": 5,
      "filePath": "d.ts",
      "fixableErrorCount": 4,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 1,
          "endColumn": 19,
          "endLine": 13,
          "fix": Object {
            "range": Array [
              373,
              376,
            ],
            "text": "let",
          },
          "line": 13,
          "message": "Unexpected var, use let or const instead.",
          "nodeType": "VariableDeclaration",
          "ruleId": "no-var",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 18,
          "endLine": 13,
          "fix": Object {
            "range": Array [
              378,
              386,
            ],
            "text": "",
          },
          "line": 13,
          "message": "Type number trivially inferred from a number literal, remove type annotation.",
          "messageId": "noInferrableType",
          "nodeType": "VariableDeclarator",
          "ruleId": "@typescript-eslint/no-inferrable-types",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 14,
          "endLine": 13,
          "line": 13,
          "message": "'x' is assigned a value but never used.",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/no-unused-vars",
          "severity": 1,
        },
        Object {
          "column": 7,
          "endColumn": 8,
          "endLine": 15,
          "line": 15,
          "message": "'d' is assigned a value but never used.",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/no-unused-vars",
          "severity": 1,
        },
        Object {
          "column": 1,
          "endColumn": 2,
          "endLine": 16,
          "line": 16,
          "message": "'d' is constant.",
          "messageId": "const",
          "nodeType": "Identifier",
          "ruleId": "no-const-assign",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 6,
          "endLine": 18,
          "line": 18,
          "message": "'c' is assigned a value but never used.",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/no-unused-vars",
          "severity": 1,
        },
        Object {
          "column": 9,
          "endColumn": 9,
          "endLine": 21,
          "fix": Object {
            "range": Array [
              445,
              445,
            ],
            "text": " ",
          },
          "line": 21,
          "message": "Insert \`·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 15,
          "endColumn": 15,
          "endLine": 22,
          "fix": Object {
            "range": Array [
              471,
              471,
            ],
            "text": ";",
          },
          "line": 22,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
      ],
      "source": "/**
 * Created Date: Sunday, July 14th 2019, 9:38:48 pm
 * Author: hanjingbo@ysstech.com | jingboup@gmail.com
 * -----
 * Last Modified: Monday, July 15th 2019, 11:34:58 am
 * Modified By: hanjingbo <hanjingbo@ysstech.com | jingboup@gmail.com>
 * -----
 * Copyright (c) 2019-present, #Lugia#.
 * ------------------------------------
 * JavaScript will save your soul!
 */

var x: number = 1;

const d = [];
d = 2;

let c = 3;
c = 'c3';

const a:string = 0;
console.log(a)
",
      "warningCount": 3,
    },
    Object {
      "errorCount": 3,
      "filePath": "flow.js",
      "fixableErrorCount": 2,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 7,
          "endColumn": 19,
          "endLine": 14,
          "fix": Object {
            "range": Array [
              389,
              389,
            ],
            "text": " ",
          },
          "line": 14,
          "message": "There must be a space after const type annotation colon.",
          "nodeType": "VariableDeclarator",
          "ruleId": "flowtype/space-after-type-colon",
          "severity": 2,
        },
        Object {
          "column": 7,
          "endColumn": 15,
          "endLine": 14,
          "line": 14,
          "message": "'a' is assigned a value but never used.",
          "nodeType": "Identifier",
          "ruleId": "no-unused-vars",
          "severity": 2,
        },
        Object {
          "column": 9,
          "endColumn": 9,
          "endLine": 14,
          "fix": Object {
            "range": Array [
              389,
              389,
            ],
            "text": " ",
          },
          "line": 14,
          "message": "Insert \`·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
      ],
      "source": "/**
 * Created Date: Sunday, July 14th 2019, 9:03:46 pm
 * Author: hanjingbo@ysstech.com | jingboup@gmail.com
 * -----
 * Last Modified: Sunday, July 14th 2019, 9:05:08 pm
 * Modified By: hanjingbo <hanjingbo@ysstech.com | jingboup@gmail.com>
 * -----
 * Copyright (c) 2019-present, #Lugia#.
 * ------------------------------------
 * JavaScript will save your soul!
 */

// @flow
const a:string = 0;
",
      "warningCount": 0,
    },
    Object {
      "errorCount": 7,
      "filePath": "hooks.jsx",
      "fixableErrorCount": 5,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 19,
          "endColumn": 26,
          "endLine": 11,
          "line": 11,
          "message": "Unable to resolve path to module 'react'.",
          "nodeType": "Literal",
          "ruleId": "import/no-unresolved",
          "severity": 2,
        },
        Object {
          "column": 14,
          "endColumn": 14,
          "endLine": 13,
          "fix": Object {
            "range": Array [
              337,
              337,
            ],
            "text": " ",
          },
          "line": 13,
          "message": "Insert \`·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 3,
          "endColumn": 17,
          "endLine": 14,
          "line": 14,
          "message": "React Hook \\"React.useState\\" is called in function \\"dd\\" which is neither a React function component or a custom React Hook function.",
          "nodeType": "MemberExpression",
          "ruleId": "react-hooks/rules-of-hooks",
          "severity": 2,
        },
        Object {
          "column": 15,
          "endColumn": 17,
          "endLine": 17,
          "fix": Object {
            "range": Array [
              377,
              379,
            ],
            "text": " () ",
          },
          "line": 17,
          "message": "Replace \`()\` with \`·()·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 13,
          "endColumn": 15,
          "endLine": 18,
          "fix": Object {
            "range": Array [
              396,
              398,
            ],
            "text": " />;",
          },
          "line": 18,
          "message": "Replace \`/>\` with \`·/>;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 2,
          "endColumn": 2,
          "endLine": 19,
          "fix": Object {
            "range": Array [
              400,
              400,
            ],
            "text": ";",
          },
          "line": 19,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 5,
          "endLine": 21,
          "fix": Object {
            "range": Array [
              406,
              406,
            ],
            "text": ";",
          },
          "line": 21,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
      ],
      "source": "/*
 * Created Date: Sunday, July 14th 2019, 8:54:38 pm
 * Author: hanjingbo@ysstech.com | jingboup@gmail.com
 * -----
 * Last Modified: Sunday, July 14th 2019, 8:59:42 pm
 * Modified By: hanjingbo <hanjingbo@ysstech.com | jingboup@gmail.com>
 * -----
 * Copyright (c) 2019-present, #Lugia#.
 */

import React from 'react';

function dd(){
  React.useState(0);
}

export default()=> {
  return <br/>
}

dd()
",
      "warningCount": 0,
    },
    Object {
      "errorCount": 8,
      "filePath": "semicolon.js",
      "fixableErrorCount": 6,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 13,
          "endColumn": 18,
          "endLine": 1,
          "fix": Object {
            "range": Array [
              12,
              17,
            ],
            "text": "'foo';",
          },
          "line": 1,
          "message": "Replace \`\\"foo\\"\` with \`'foo';\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 13,
          "endColumn": 14,
          "endLine": 2,
          "fix": Object {
            "range": Array [
              30,
              31,
            ],
            "text": "",
          },
          "line": 2,
          "message": "Delete \`·\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 8,
          "endLine": 4,
          "fix": Object {
            "range": Array [
              38,
              41,
            ],
            "text": "const",
          },
          "line": 4,
          "message": "'bar' is never reassigned. Use 'const' instead.",
          "messageId": "useConst",
          "nodeType": "Identifier",
          "ruleId": "prefer-const",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 8,
          "endLine": 4,
          "line": 4,
          "message": "'bar' is assigned a value but never used.",
          "nodeType": "Identifier",
          "ruleId": "no-unused-vars",
          "severity": 2,
        },
        Object {
          "column": 16,
          "endColumn": 16,
          "endLine": 4,
          "fix": Object {
            "range": Array [
              53,
              53,
            ],
            "text": ";",
          },
          "line": 4,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 7,
          "endColumn": 8,
          "endLine": 6,
          "line": 6,
          "message": "'a' is assigned a value but never used.",
          "nodeType": "Identifier",
          "ruleId": "no-unused-vars",
          "severity": 2,
        },
        Object {
          "column": 7,
          "endColumn": 8,
          "endLine": 8,
          "fix": Object {
            "range": Array [
              81,
              82,
            ],
            "text": "",
          },
          "line": 8,
          "message": "Delete \`,\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 2,
          "endColumn": 2,
          "endLine": 9,
          "fix": Object {
            "range": Array [
              84,
              84,
            ],
            "text": ";",
          },
          "line": 9,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
      ],
      "source": "const foo = \\"foo\\"
console.log( foo);

let bar = 'bar'

const a = {
  q: 1,
  w: 2,
}
",
      "warningCount": 0,
    },
  ],
  "usedDeprecatedRules": Array [
    Object {
      "replacedBy": Array [],
      "ruleId": "flowtype/valid-syntax",
    },
    Object {
      "replacedBy": Array [],
      "ruleId": "jsx-a11y/label-has-for",
    },
    Object {
      "replacedBy": Array [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    Object {
      "replacedBy": Array [
        "triple-slash-reference",
      ],
      "ruleId": "@typescript-eslint/no-triple-slash-reference",
    },
    Object {
      "replacedBy": Array [
        "consistent-type-definitions",
      ],
      "ruleId": "@typescript-eslint/prefer-interface",
    },
  ],
  "warningCount": 5,
}
`;
